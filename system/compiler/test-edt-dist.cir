define(CELL_SIZE, 8)
define(SEQU_SIZE, eval(2**(CELL_SIZE-1)-1))

define(vec_dup,`
//
// $1[i] := $2[i]; for i = 0 to decr($3)

for vec_i from 0 to decr($3)
begin
    $1[vec_i] := $2[vec_i];
end
')





define(min2, `
//
// $1 := min($2, $3);
//
$1 := $2;

if $1 > $3 then
    $1 := $3;
end
')



define(min3, `
min2($1, $2, $3);
min2($1, $1, $4);
')



//
// Edit distance
//

defvar a := input.1{SEQU_SIZE};
defvar b := input.0{SEQU_SIZE};

init := 0{CELL_SIZE};
for i from 0 to decr(SEQU_SIZE)
begin
    init := init + 1{CELL_SIZE};
    this_row[i] := init;
end

init := 0{CELL_SIZE};
for i from 0 to decr(SEQU_SIZE)
begin
    vec_dup(prev_row, this_row, SEQU_SIZE);

    d_cell := init;
    l_cell := init + 1{CELL_SIZE};
    u_cell := prev_row[0];

    init := l_cell;

    min3(min_cell, d_cell, u_cell, l_cell);

    if a{i} == b{0} then
        this_row[0] := d_cell;
    else
        this_row[0] := min_cell + 1{CELL_SIZE};
    end

    prev_cell := this_row[0];

    for j from 1 to decr(SEQU_SIZE)
    begin
        d_cell := u_cell;
        l_cell := prev_cell;
        u_cell := prev_row[j];

        min3(min_cell, d_cell, u_cell, l_cell);

        if a{i} == b{j} then
            this_row[j] := d_cell;
        else
            this_row[j] := min_cell + 1{CELL_SIZE};
        end

        prev_cell := this_row[j];
    end
end

one_at_a_time := this_row[decr(SEQU_SIZE)];
output.0 := one_at_a_time;
